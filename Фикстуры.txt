Фикстуры в контексте PyTest — это вспомогательные функции для наших тестов, которые не являются частью тестового сценария.
 -это подготовка тестового окружения
 -очистка тестового окружения и данных после завершения теста.
 -для подключения к базе данных, с которой работают тесты,
 -создания тестовых файлов
 -подготовки данных в текущем окружении с помощью API-методов.

Классический способ работы с фикстурами — создание setup- и teardown-методов в файле с тестами
https://docs.pytest.org/en/latest/how-to/xunit_setup.html

Старый способ для фикстур:
в классе создаем методы с  аннотацией @classmethod - с такой аннотацией вызов будет при запуске класса и при выходе
функция с именем setup_class задает настройку перед тестом
функи=ция с именем teardown_class задает инструкции по завершению теста
  @classmethod
    def setup_class(self):
        self.browser = webdriver.Chrome()
    @classmethod
    def teardown_class(self):
        self.browser.quit()
Если задать функции в классе без аннотации @classmethod - вызов перед каждым тестом в классе

-Фикстуры для pytest
мы напишем метод browser и укажем, что он является фикстурой с помощью декоратора @pytest.fixture.
После этого мы можем вызывать фикстуру в тестах, передав ее как параметр.
По умолчанию фикстура будет создаваться для каждого тестового метода, то есть для каждого теста запустится свой экземпляр браузера.
(создаем вне класса)
@pytest.fixture
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    return browser
и вызываем  в методе(тесте)  находящемся в классе, передав в параметр
class TestMainPage1():
    # вызываем фикстуру в тесте, передав ее как параметр
    def test_guest_should_see_login_link(self, browser):
        browser.get(link)
        browser.find_element(By.CSS_SELECTOR, "#login_link")
Финализаторы:
Один из вариантов финализатора — использование ключевого слова Python: yield.
После завершения теста, который вызывал фикстуру, выполнение фикстуры продолжится со строки, следующей за строкой со словом yield:
@pytest.fixture
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    # этот код выполнится после завершения теста
    print("\nquit browser..")
    browser.quit()

    Есть альтернативный способ вызова teardown кода с помощью встроенной фикстуры request и ее метода addfinalizer
    https://docs.pytest.org/en/latest/how-to/fixtures.html#adding-finalizers-directly
    import pytest

@pytest.fixture
def my_fixture(request):
    # setup код (выполняется перед тестом)
    print("Setup my_fixture")

    def teardown():
        # teardown код (выполняется после теста)
        print("Teardown my_fixture")

    request.addfinalizer(teardown)

    return "some resource"  # Можно вернуть какой-то ресурс для использования в тесте

def test_using_fixture(my_fixture):
    print(f"Using fixture: {my_fixture}")
    assert my_fixture == "some resource"