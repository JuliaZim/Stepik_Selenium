Любой тест должен содержать:

Входные данные.
Тестовый сценарий, то есть набор шагов, которые надо выполнить для получения результата.
Проверка ожидаемого результата.

Проверку ОР можно делать через assert
Чтобы было понятно при ошибках, где упало, можно добавить сообщение:
>>> assert abs(-42) == -42, "Should be absolute value of a number"

Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
AssertionError: Should be absolute value of a number

Если вы работаете с каким-то текстом (например, проверяете информационное сообщение, текущий url, ссылку, placeholder в input-элементе или любой другой текст), в сообщении об ошибке всегда лучше выводить оба значения: то, которое ожидалось, и то, которое получили по факту.
Всё как в хорошем багрепорте: ожидаемый и фактический результат.

Еще один важный момент: когда вы работаете с текстом элементов на странице или любым другим контентом, который может измениться, всегда записывайте его в отдельную переменную для сравнения.
catalog_text = self.catalog_link.text # считываем текст и записываем его в переменную
assert catalog_text == "Каталог", \
    f"Wrong language, got {catalog_text} instead of 'Каталог'"

Проверка вхождения подстроки в строку:
def test_substring(full_string, substring):
    assert substring in full_string, f"expected '{substring}' to be substring of '{full_string}'"

Фреймворки для тестов на python:
 unittest - встроен в python,
 PyTest и nose - устанавливаются дополнительно, но расширены
